#!/usr/bin/python3

# Copyright 2020-2021 Dara Poon and the University of British Columbia

import argparse
from collections import namedtuple
from glob import glob
import os
import pwd
import re
import sys
import mailrules.forward_to_sieve
import mailrules.procmailrc
import mailrules.proc_to_sieve
import mailrules.sieve

def parse_args(args=None):
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-u', '--user',
        type=str,
        help='username whose configuration to convert',
    )
    parser.add_argument('-d', '--domain',
        type=str,
        help='email domain of the user',
    )
    parser.add_argument('-p', '--provenance-comments',
        action='store_true',
        help='output comments about the source filenames and their modification times',
    )
    return parser.parse_args(args)

def error(msg):
    print(msg, file=sys.stderr)
    sys.exit(1)

def conversion_context(opts):
    procmail_context = mailrules.proc_to_sieve.ProcmailContext(
        user=opts.user,
        email_domain=opts.domain,
        env={
            'LOGNAME': opts.user or os.getenv('LOGNAME'),
            'HOME': lambda c: c.directory,
            'MAILDIR': lambda c: c.resolve_path('Maildir'),
            'DEFAULT': lambda c: c.resolve_path('Maildir/'),
            'ORGMAIL': lambda c: c.resolve_path('Maildir/'),
        }
    )

    procmailrc_path = procmail_context.resolve_path('.procmailrc')
    if not os.path.isfile(procmailrc_path):
        procmailrc_path = None

    forward_paths = glob(procmail_context.resolve_path('.forward')) + list(filter(
        lambda path: re.fullmatch(r'\.forward\+[A-Za-z0-9_]+', os.path.basename(path)),
        glob(procmail_context.resolve_path('.forward+*'))
    ))

    return namedtuple('ConversionContext',
            'homedir forward_paths procmailrc_path procmail_context provenance_comments')(
        procmail_context.directory,
        {re.sub(r'.*/.forward\+?', '', path): path for path in forward_paths},
        procmailrc_path,
        procmail_context,
        opts.provenance_comments
    )

def main():
    conv = conversion_context(parse_args())
    out = mailrules.sieve.Script()

    for cmd in mailrules.forward_to_sieve.ForwardFiles(
                conv.forward_paths, conv.procmail_context,
                conv.provenance_comments
            ):
        out.add_command(cmd)

    if conv.procmailrc_path:
        for cmd in mailrules.proc_to_sieve.Procmailrc(
                    conv.procmailrc_path, conv.procmail_context,
                    conv.provenance_comments
                ):
            out.add_command(cmd)

    sieve_script_text = str(out)
    if sieve_script_text:
        print(sieve_script_text, end='\r\n')

    sys.exit(1 if mailrules.proc_to_sieve.FIXME.instances else 0)

if __name__ == '__main__':
    main()
